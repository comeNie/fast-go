<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="${package}.dao.${className}Dao">

    <!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="${package}.entity.${className}Entity" id="${classname}Map">
        #foreach($column in $columns)
            #if($column.columnName != 'op_time' and $column.columnName != 'create_time' and $column.columnName != 'is_valid')
                <result property="${column.attrname}" column="${column.columnName}"/>
            #end
        #end
    </resultMap>

    <!--根据主键查找对象-->
    <select id="queryObject" resultType="${package}.entity.${className}Entity">
		select * from `${tableName}` where ${pk.columnName} = #{value}
	</select>
    <!--根据多个字段查找,返回一个对象-->


    <!--根据多个字段查找,返回对象列表-->
    <select id="queryList" resultType="${package}.entity.${className}Entity">
        select * from `${tableName}`
        <where>
            #foreach($column in $columns)
                #if($column.columnName != $pk.columnName and $column.columnName != 'is_valid' and $column.columnName != 'create_time' and  $column.columnName != 'op_time')
                    <if test="$column.attrname != null"> AND `$column.columnName` = #{$column.attrname}</if>
                #end
            #end
            <if test="true">
                AND is_valid = 1
            </if>
        </where>
        <!--这里添加查询条件:  示例-->
        <!--<where>
			<if test="orgId != null">
				a.org_id = #{orgId}
			</if>
			<if test="query != null and query != ''">
				AND CONCAT(IFNULL(a.host_name,''),IFNULL(a.department,'')) like CONCAT(CONCAT('%', #{query}), '%')
			</if>
			<if test="hostName != null and hostName != ''">
				AND a.host_name LIKE concat (concat('%',#{hostName}),'%')
			</if>
		</where>-->
        <choose>
            <when test="sidx != null and sidx.trim() != '' and order != null and order.trim() != ''">
                order by `${order}` ${sidx}
            </when>
            <otherwise>
                order by ${pk.columnName} ASC
            </otherwise>
        </choose>
        <if test="offset != null and limit != null">
            limit #{offset}, #{limit}
        </if>
    </select>

    <select id="queryTotal" resultType="int">
        select count(*) from `${tableName}`
        <where>
            #foreach($column in $columns)
                #if($column.columnName != $pk.columnName and $column.columnName != 'is_valid' and $column.columnName != 'create_time' and  $column.columnName != 'op_time')
                    <if test="$column.attrname != null"> AND `$column.columnName` = #{$column.attrname}</if>
                #end
            #end
            <if test="true">
                AND is_valid = 1
            </if>
        </where>
        <!--这里添加查询条件:  示例-->
        <!--<where>
			<if test="orgId != null">
				a.org_id = #{orgId}
			</if>
			<if test="query != null and query != ''">
				AND CONCAT(IFNULL(a.host_name,''),IFNULL(a.department,'')) like CONCAT(CONCAT('%', #{query}), '%')
			</if>
			<if test="hostName != null and hostName != ''">
				AND a.host_name LIKE concat (concat('%',#{hostName}),'%')
			</if>
		</where>-->
    </select>
    <!-- 保存 -->
    <insert id="save" parameterType="${package}.entity.${className}Entity"#if($pk.extra == 'auto_increment')
            useGeneratedKeys="true" keyProperty="$pk.attrname"#end>
        insert into `${tableName}`
        <set>
            #foreach($column in $columns)
                #if($column.columnName != $pk.columnName and $column.columnName != 'is_valid' and $column.columnName != 'create_time' and  $column.columnName != 'op_time')
                    <if test="$column.attrname != null">`$column.columnName` = #{$column.attrname} ,</if>
                #end
            #end
            is_valid = 1,
            create_time = now(),
            op_time = now()
        </set>
    </insert>

    <!--批量插入-->
    <insert id="saveBatch" parameterType="java.util.List" keyProperty="id">
        INSERT INTO `${tableName}`
        (
            #foreach($column in $columns)
                #if($column.columnName != $pk.columnName and $column.columnName != 'is_valid' and $column.columnName != 'create_time' and  $column.columnName != 'op_time')
                    `$column.columnName`,
                #end
            #end
            is_valid, create_time, op_time
        )
        VALUES
        <foreach collection="list" index="index" item="item" separator=",">
            (
                #foreach($column in $columns)
                    #if($column.columnName != $pk.columnName and $column.columnName != 'is_valid' and $column.columnName != 'create_time' and  $column.columnName != 'op_time')
                        #{item.$column.attrname},
                    #end
                #end
                1, now(), now()
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
        #foreach($column in $columns)
            #if($column.columnName != $pk.columnName and $column.columnName != 'is_valid' and $column.columnName != 'create_time' and  $column.columnName != 'op_time')
                `$column.columnName` = `$column.columnName`,
            #end
        #end
        `is_valid` = 1, `create_time` = now(), `op_time` = now()
    </insert>

    <update id="update" parameterType="${package}.entity.${className}Entity">
        update `${tableName}`
        <set>
            #foreach($column in $columns)
                #if($column.columnName != $pk.columnName and  $column.columnName != 'op_time' and $column.columnName != 'create_time' and $column.columnName != 'is_valid')
                    <if test="$column.attrname != null">`$column.columnName` = #{$column.attrname},</if>
                #end
            #end
            `op_time` = now()
        </set>
        where ${pk.columnName} = #{${pk.attrname}}
    </update>

    <!--逻辑删除-->
    <update id="deleteLogically">
        update `${tableName}`
        <set>
            `op_time` = now(),
            `is_valid` = 0
        </set>
        where ${pk.columnName} = #{${pk.attrname}}
    </update>
    <!--物理删除 -->
    <delete id="delete">
		delete from `${tableName}` where ${pk.columnName} = #{value}
	</delete>

    <delete id="deleteBatch">
        delete from `${tableName}` where ${pk.columnName} in
        <foreach item="${pk.attrname}" collection="array" open="(" separator="," close=")">
            #{${pk.attrname}}
        </foreach>
    </delete>

    <!--批量逻辑删除-->
    <update id="deleteBatchLogically">
        update `${tableName}`
        SET
        `is_valid` = 0,
        `op_time` = now()
        WHERE ${pk.columnName} IN
        <foreach item="${pk.attrname}" collection="array" open="(" separator="," close=")">
            #{${pk.attrname}}
        </foreach>
    </update>

    <!--批量删除指定用户资源-->
    <delete id="deleteOfMine">
        DELETE FROM `${tableName}` WHERE account_id = #{accountId,jdbcType=INTEGER} AND ${pk.columnName} IN
        <foreach item="${pk.attrname}" collection="ids" open="(" separator="," close=")">
            #{${pk.attrname}}
        </foreach>
    </delete>

    <!--批量逻辑删除用户资源-->
    <update id="deleteOfMineLogically">
        update `${tableName}`
        SET `is_valid` = 0, `op_time` = now()
        WHERE account_id = #{accountId,jdbcType=INTEGER} AND ${pk.columnName} IN
        <foreach item="${pk.attrname}" collection="ids" open="(" separator="," close=")">
            #{${pk.attrname}}
        </foreach>
    </update>

</mapper>